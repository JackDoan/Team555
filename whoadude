#include <AccelStepper.h>
#include <MultiStepper.h>


// The X Stepper pins
#define STEPPER1_DIR_PIN 3
#define STEPPER1_STEP_PIN 2
// The Y stepper pins
#define STEPPER2_DIR_PIN 7
#define STEPPER2_STEP_PIN 6

typedef union longBytesU {
  struct {
    int lowest:8;
    int low:8;
    int high:8;
    int highest:8;
  } b;
  long l;
} longbytes;

// Define some steppers and the pins the will use
AccelStepper stepperX(AccelStepper::DRIVER, 25, 24);
AccelStepper stepperY(AccelStepper::DRIVER, 23, 22);
void setup() {
  pinMode(40, OUTPUT);
  pinMode(41, OUTPUT);
  digitalWrite(41, 0);
  stepperX.setEnablePin(40);
  //stepperY.setEnablePin(41);
  pinMode(50, INPUT);
  pinMode(51, INPUT);
  pinMode(52, INPUT_PULLUP);
  pinMode(53, OUTPUT);
  digitalWrite(53, 0);
  pinMode(34, OUTPUT);
  digitalWrite(34, 0);



  // put your setup code here, to run once:
    stepperX.setMaxSpeed(400000.0);
    stepperX.setAcceleration(6500.0);
    stepperY.setMaxSpeed(200000.0); //200000
    stepperY.setAcceleration(50000.0); //30000
    Serial.begin(115200);
}

longbytes rx;
bool maxX, minX, maxY, minY;
bool red, white;
longbytes stepCount;
void loop() {
  bool white = digitalRead(50);
  bool red = digitalRead(51);
  bool maxX = 0;//!digitalRead(52);
  bool minX = 0;//!digitalRead(50);
  //bool maxY = !digitalRead(53);
  bool minY = 0;//!digitalRead(51);


  // put your main code here, to run repeatedly:
    if (maxX) {
      //Serial.print("maxX");
      stepperX.stop();
    }
    if (minX) {
      //Serial.print("minX");
      stepperX.stop();
    }
    if (maxY) {
      //Serial.print("maxY");
      stepperY.stop();
    }
    if (minY) {
      //Serial.print("minY");
      stepperY.stop();
    }


  if (Serial.available() >= 6) {
      // get the new byte:
      char inChar = (char)Serial.read();
      if(inChar == 0x69) {
        char cmd = (char)Serial.read();
        rx.b.highest = Serial.read();
        rx.b.high = Serial.read();
        rx.b.low = Serial.read();
        rx.b.lowest = Serial.read();
        //Serial.write('i');
        //Serial.write(cmd);

        switch(cmd) {
          case '7':
            stepperX.moveTo(600);
            break;
          case '8':
            stepperX.moveTo(-600);
            break;
          case '9':
            stepperX.moveTo(0);
            break;
          case '!':
            stepperX.stop();
            stepperY.stop();
            break;
          case 'x':
            stepperX.move(rx.l);
            break;
          case 'y':
            stepperY.move(rx.l);
            break;
          case 'X':
            stepperX.moveTo(rx.l);
            break;
          case 'Y':
            stepperY.moveTo(rx.l);
            break;
          case 'H':
            stepperX.setCurrentPosition(0);
            stepperY.setCurrentPosition(0);
            break;
          case 'O':
            stepperX.setMaxSpeed((float)rx.l);
            break;
          case '{':
            stepperY.setMaxSpeed((float)rx.l);
            break;
          case 'B':
            rx.b.lowest = (white << 5) | (red << 4) | (maxX << 3) | (minX << 2) | (maxY << 1) | (minY);
            rx.b.low = analogRead(A0);
            rx.b.high = analogRead(A1);
            rx.b.highest = analogRead(A2);
            Serial.write("iB");
            Serial.write(rx.b.highest);
            Serial.write(rx.b.high);
            Serial.write(rx.b.low);
            Serial.write(rx.b.lowest);
            break;
          case 'P': //note: don't send these with the motors moving
            if (rx.b.lowest) {
              stepperX.enableOutputs();
            } else {
              stepperX.disableOutputs();
            }
            if (rx.b.low) {
              stepperY.enableOutputs();
            } else {
              stepperY.disableOutputs();
            }
            break;
         case 'Q':
          rx.l = stepperX.distanceToGo();
          break;
         case 'W':
          rx.l = stepperY.distanceToGo();
          break;
         case '?':
          if(rx.b.lowest == 'y') {
            stepCount.l = stepperY.currentPosition();
          }
          else {
            stepCount.l = stepperX.currentPosition();
          }
          rx = stepCount;
          Serial.write("i?");
          Serial.write(rx.b.highest);
          Serial.write(rx.b.high);
          Serial.write(rx.b.low);
          Serial.write(rx.b.lowest);
          break;
        }


      }
      while(Serial.available() > 0) {
          char t = Serial.read();
      }
  }

  stepperX.run();
  stepperY.run();
}