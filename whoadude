#include <AccelStepper.h>
#include <MultiStepper.h>

typedef union longBytesU {
struct {
int lowest:8;
int low:8;
int high:8;
int highest:8;
} b;
long l;
} longbytes;

// Define some steppers and the pins the will use
AccelStepper stepperX(AccelStepper::DRIVER, 25, 24);
AccelStepper stepperY(AccelStepper::DRIVER, 23, 22);
void setup() {
// put your setup code here, to run once:
stepperX.setMaxSpeed(400000.0);
stepperX.setAcceleration(6500.0);
stepperY.setMaxSpeed(200000.0); //200000
stepperY.setAcceleration(50000.0); //30000
Serial.begin(115200);
}

longbytes rx;
longbytes stepCount;
void loop() {
  if (Serial.available() >= 6) {
  // get the new byte:
  char inChar = (char)Serial.read();
  if(inChar == 0x69) {
  char cmd = (char)Serial.read();
  rx.b.highest = Serial.read();
  rx.b.high = Serial.read();
  rx.b.low = Serial.read();
  rx.b.lowest = Serial.read();
  //Serial.write('i');
  //Serial.write(cmd);

  switch(cmd) {
    case '!':
    stepperX.stop();
    stepperY.stop();
    break;
    case 'x':
    stepperX.move(rx.l);
    break;
    case 'y':
    stepperY.move(rx.l);
    break;
    case 'X':
    stepperX.moveTo(rx.l);
    break;
    case 'Y':
    stepperY.moveTo(rx.l);
    break;
    case 'H':
    stepperX.setCurrentPosition(0);
    stepperY.setCurrentPosition(0);
    break;
    case 'O':
    stepperX.setMaxSpeed((float)rx.l);
    break;
    case '{':
    stepperY.setMaxSpeed((float)rx.l);
    break;
    case 'Q':
    rx.l = stepperX.distanceToGo();
    break;
    case 'W':
    rx.l = stepperY.distanceToGo();
    break;
    case '?':
    if(rx.b.lowest == 'y') {
      stepCount.l = stepperY.currentPosition();
    }
    else {
      stepCount.l = stepperX.currentPosition();
    }
    rx = stepCount;
    Serial.write("i?");
    Serial.write(rx.b.highest);
    Serial.write(rx.b.high);
    Serial.write(rx.b.low);
    Serial.write(rx.b.lowest);
    break;
  }


  }
  else {
    while(Serial.available() > 0) {        
  }   char t = Serial.read();              
    }                                      


  }

  stepperX.run();
  stepperY.run();
}